import React from "react";
import styles from "./CostumeEditor.module.css";

/**
 * –ü–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–æ–¥ –∏–º–µ—é—â–∏–π—Å—è CSS.
 */
export default function Sidebar({
    // –æ–±—â–µ–µ
    presets = [],
    presetIdx = 0,
    onChangePreset = () => { },

    // —Ä–µ–∂–∏–º—ã
    mode,
    onChangeMode = () => { },

    // –∏—Å—Ç–æ—Ä–∏—è –∏ —Å–µ—Ç–∫–∞
    canUndo = false,
    canRedo = false,
    onUndo = () => { },
    onRedo = () => { },
    gridEnabled = true,
    onToggleGrid = () => { },

    // –∑–∞–ª–∏–≤–∫–∏
    fillColor = "#3B82F6",
    onChangeFillColor = () => { },
    onFillClick = () => { },
    onEraseFillClick = () => { },
    colors = ["#3B82F6", "#F97316", "#22C55E", "#EF4444", "#A855F7", "#0EA5E9", "#F59E0B", "#111827"],

    // –ª–∏–Ω–∏–∏
    lineWavy = false,
    onToggleWavy = () => { },
    insetPx = 8,
    onChangeInsetPx = () => { },
}) {
    return (
        <aside className={styles.sidebar}>
            <div className="panel">
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className={styles.sectionTitle} style={{ marginBottom: 10, fontWeight: 600 }}>
                    –†–µ–¥–∞–∫—Ç–æ—Ä
                </div>

                {/* Undo/Redo/Grid */}
                <div className="two" style={{ gap: 8, marginBottom: 12 }}>
                    <button className="btn" onClick={onUndo} disabled={!canUndo} title="–û—Ç–º–µ–Ω–∏—Ç—å (Ctrl/Cmd+Z)">‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å</button>
                    <button className="btn" onClick={onRedo} disabled={!canRedo} title="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å (Ctrl+Y / Cmd+Shift+Z)">‚Ü∑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
                    <button className={`btn ${gridEnabled ? "segActive" : ""}`} onClick={onToggleGrid} title="–°–µ—Ç–∫–∞">‚ñ° –°–µ—Ç–∫–∞</button>
                </div>

                {/* –î–µ—Ç–∞–ª—å (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞ ¬´–ü–µ—Ä–µ–¥/–°–ø–∏–Ω–∫–∞¬ª) */}
                <div className={styles.section} style={{ marginBottom: 12 }}>
                    <div className={styles.sectionTitle}>–î–µ—Ç–∞–ª—å</div>
                    <div className="segmented">
                        {presets.map((p, i) => {
                            const active = i === presetIdx;
                            return (
                                <button
                                    key={p.id || i}
                                    className={`segBtn ${active ? "segActive" : ""}`}
                                    onClick={() => onChangePreset(i)}
                                >
                                    {p.title || p.id || `#${i + 1}`}
                                </button>
                            );
                        })}
                    </div>
                </div>

                {/* –†–µ–∂–∏–º */}
                <div className={styles.section} style={{ marginBottom: 12 }}>
                    <div className={styles.sectionTitle}>–†–µ–∂–∏–º</div>
                    <div className="segmented">
                        <button
                            className={`segBtn ${mode === "preview" ? "segActive" : ""}`}
                            onClick={() => onChangeMode("preview")}
                            title="Esc"
                        >
                            –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button
                            className={`segBtn ${mode === "fill" ? "segActive" : ""}`}
                            onClick={() => onChangeMode("fill")}
                            title="F"
                        >
                            –ó–∞–ª–∏–≤–∫–∞
                        </button>
                        <button
                            className={`segBtn ${mode === "add-line" || mode === "delete-line" ? "segActive" : ""}`}
                            onClick={() => onChangeMode("add-line")}
                            title="A / D"
                        >
                            –õ–∏–Ω–∏–∏
                        </button>
                    </div>
                </div>

                {/* –ó–∞–ª–∏–≤–∫–∞ */}
                <div className={styles.section} style={{ display: mode === "fill" ? "block" : "none" }}>
                    <div className={styles.sectionTitle}>–¶–≤–µ—Ç –∑–∞–ª–∏–≤–∫–∏</div>
                    <div className="palette" style={{ marginBottom: 8 }}>
                        {colors.map((c) => (
                            <button
                                key={c}
                                className={`color ${c.toLowerCase() === fillColor.toLowerCase() ? "segActive" : ""}`}
                                style={{ background: c }}
                                onClick={() => onChangeFillColor(c)}
                                title={c}
                            />
                        ))}
                    </div>
                    <div className="two" style={{ gap: 8 }}>
                        <button className="btn" onClick={onFillClick}>üü¶ –ó–∞–ª–∏—Ç—å</button>
                        <button className="btn" onClick={onEraseFillClick}>‚úï –°—Ç–µ—Ä–µ—Ç—å</button>
                    </div>
                </div>

                {/* –õ–∏–Ω–∏–∏ */}
                <div className={styles.section} style={{ display: mode === "add-line" || mode === "delete-line" ? "block" : "none" }}>
                    <div className={styles.sectionTitle}>–õ–∏–Ω–∏—è</div>

                    <div className="two" style={{ gap: 8, marginBottom: 8 }}>
                        <span className="btn" title="A ‚Äî –¥–æ–±–∞–≤–∏—Ç—å; D ‚Äî —É–¥–∞–ª–∏—Ç—å">+ –î–æ–±–∞–≤–∏—Ç—å</span>
                        <span className="btn">üóë –£–¥–∞–ª–∏—Ç—å</span>
                    </div>

                    <div className="segmented" style={{ marginBottom: 10 }}>
                        <button className={`segBtn ${!lineWavy ? "segActive" : ""}`} onClick={() => onToggleWavy(false)}>–ü—Ä—è–º–∞—è</button>
                        <button className={`segBtn ${lineWavy ? "segActive" : ""}`} onClick={() => onToggleWavy(true)}>–í–æ–ª–Ω–∏—Å—Ç–∞—è</button>
                    </div>

                    <label style={{ display: "grid", gap: 6 }}>
                        <span style={{ fontSize: 12, opacity: 0.8 }}>–û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è</span>
                        <div className="two" style={{ alignItems: "center", gap: 8 }}>
                            <input
                                type="range"
                                min={0}
                                max={20}
                                value={insetPx}
                                onChange={(e) => onChangeInsetPx(Number(e.target.value))}
                                style={{ width: "100%" }}
                            />
                            <span style={{ fontSize: 12 }}>{insetPx}px</span>
                        </div>
                    </label>

                    <p style={{ fontSize: 12, opacity: 0.7, marginTop: 6 }}>
                        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø—Ä—è–º–∞—è –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –¥–µ—Ç–∞–ª—å: –ª–∏–Ω–∏—è –≤–µ–¥—ë—Ç—Å—è –ø–æ –∫–æ–Ω—Ç—É—Ä—É —Å —ç—Ç–∏–º –æ—Ç—Å—Ç—É–ø–æ–º –≤–Ω—É—Ç—Ä—å.
                    </p>
                </div>
            </div>
        </aside>
    );
}
