import { MANIFEST_URL } from "./svgPath";

// Runtime-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ manifest.json
let _manifestCache = null;

const FORCED_SLOTS = {
    front: new Set(["hood", "pocket"]),
    back: new Set(["hood"]),
};

// –∞–ª–∏–∞—Å—ã –∏–º—ë–Ω —Å–ª–æ—Ç–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ)
// + leg
const SLOT_ALIASES = {
    cuff: "cuff",
    sleeve: "sleeve",
    neck: "neck",
    belt: "belt",
    body: "body",
    hood: "hood",
    pocket: "pocket",
    leg: "leg",        // <‚Äî –¥–æ–±–∞–≤—å
};

// ‚Äî‚Äî‚Äî helpers ‚Äî‚Äî‚Äî
const parseSlot = (slot) => {
    const parts = String(slot || "").split(".");
    return {
        product: parts.length > 1 ? parts[0] : "hoodie",
        pure: parts.length > 1 ? parts.slice(1).join(".") : parts[0],
    };
};
const shouldSyncSlot = (slotOrPure) => {
    const pure = String(slotOrPure || "").split(".").pop().toLowerCase();
    // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Å—ë –∫—Ä–æ–º–µ –∫–∞—Ä–º–∞–Ω–∞
    return pure !== "pocket";
};

export function reduceSetSlotVariant(
    prev,
    { face, slot, variantId, prevNeckByFace }
) {
    const { product, pure } = parseSlot(slot);
    const faceOther = face === "front" ? "back" : "front";
    const curFace = { ...(prev[face] || {}) };
    const curOther = { ...(prev[faceOther] || {}) };
    const nextPrevNeck = { ...(prevNeckByFace || {}) };

    const ns = `${product}.${pure}`;
    const hoodKey = "hoodie.hood";
    const neckKey = "hoodie.neck";

    const hoodTurnOn = (product === "hoodie" && pure === "hood" && variantId && variantId !== "base");
    const hoodTurnOff = (product === "hoodie" && pure === "hood" && (!variantId || variantId === "base"));
    const neckChanging = (product === "hoodie" && pure === "neck");

    // –µ—Å–ª–∏ –º–µ–Ω—è—é—Ç —à–µ—é ‚Äî –≥–∞—Å–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ø—é—à–æ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if (neckChanging) {
        if (curFace[hoodKey] && curFace[hoodKey] !== "base") {
            delete curFace[hoodKey];
        }
    }
    // –≤–∫–ª—é—á–∞—é—Ç –∫–∞–ø—é—à–æ–Ω ‚Üí –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —à–µ—é –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ—ë
    if (hoodTurnOn) {
        nextPrevNeck[face] = curFace[neckKey] ?? "base";
        delete curFace[neckKey];
    }
    // –≤—ã–∫–ª—é—á–∞—é—Ç –∫–∞–ø—é—à–æ–Ω ‚Üí –≤–µ—Ä–Ω—ë–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —à–µ—é
    if (hoodTurnOff) {
        const prevNeck = nextPrevNeck[face];
        if (prevNeck != null) {
            if (prevNeck === "base") delete curFace[neckKey];
            else curFace[neckKey] = prevNeck;
        }
    }

    // –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ—Ç
    if (!variantId || variantId === "base") {
        delete curFace[ns];
        if (shouldSyncSlot(pure)) delete curOther[ns];
    } else {
        curFace[ns] = variantId;
        if (shouldSyncSlot(pure)) curOther[ns] = variantId;
    }

    // –ø—Ä–∏ —è–≤–Ω–æ–π —Å–º–µ–Ω–µ —à–µ–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º "–ø–∞–º—è—Ç—å" —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (neckChanging) {
        nextPrevNeck[face] = curFace[neckKey] ?? "base";
    }

    const nextDetails = { ...prev, [face]: curFace, [faceOther]: curOther };
    return { nextDetails, nextPrevNeck };
}

export function isForcedSlot(face, slot) {
    const f = face === "back" ? "back" : "front";
    const pure = String(slot || "").split(".").pop();   // ‚Üê –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "hoodie.hood"
    return FORCED_SLOTS[f].has(pure);
}

export async function loadSvgManifest() {
    if (_manifestCache) return _manifestCache;
    const res = await fetch(MANIFEST_URL, { cache: "no-store" });
    if (!res.ok) throw new Error(`Manifest not found at ${MANIFEST_URL} (status ${res.status})`);
    const ct = (res.headers.get("content-type") || "").toLowerCase();
    if (!ct.includes("json")) {
        const head = await res.text();
        console.error("Manifest is not JSON. First bytes:", head.slice(0, 80));
        throw new Error("Manifest is not JSON");
    }
    _manifestCache = await res.json();
    return _manifestCache;
}

// –ë–∞–∑–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–ª–æ—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–π–º—Å–ø–µ–π—Å–Ω—ã–π —Å–ª–æ—Ç "hoodie.cuff")
export async function baseHasSlot(face, slot) {
    const m = await loadSvgManifest();
    const list = m?.base?.[face] || [];
    const parts = String(slot || "").split(".");
    const product = parts.length > 1 ? parts[0] : null;
    const pure = parts.length > 1 ? parts.slice(1).join(".") : parts[0];
    return list.some(e => {
        const prod = e?.product || "hoodie";
        return e?.slot === pure && (!product || prod === product);
    });
}

// –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–ª–æ—Ç–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–π–º—Å–ø–µ–π—Å "hoodie.cuff" | "pants.cuff")
export async function getVariantsForSlot(slot) {
    const m = await loadSvgManifest();
    const { product, pure } = parseSlot(slot);

    const baseV = [{ id: "base", name: "–ë–∞–∑–æ–≤–∞—è", files: { front: {}, back: {} }, product }];

    // —Å–ø–∏—Å–æ–∫ –ø–æ —á–∏—Å—Ç–æ–º—É —Å–ª–æ—Ç—É
    let list = m?.variants?.[pure] || [];
    // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    list = list.filter(v => (v?.product || "hoodie") === product);

    // –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ
    let face = null;
    try { face = (localStorage.getItem("ce.activeFace") || "").toLowerCase(); } catch { }
    if (face === "front" || face === "back") {
        list = list.filter(v => {
            const f = v?.files?.[face] || {};
            return !!(f.file || f.left || f.right || f.inner);
        });
    }

    // uniq –ø–æ id
    const seen = new Set();
    const uniq = [];
    for (const v of list) {
        if (v?.id && !seen.has(v.id)) {
            seen.add(v.id);
            uniq.push(v);
        }
    }
    return [...baseV, ...uniq];
}

// –ë–∞–∑–∞ (–≥–ª—É–±–æ–∫–∞—è –∫–æ–ø–∏—è + –¥–µ—Ñ–æ–ª—Ç product = "hoodie", –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
export async function getBaseSources(face) {
    const m = await loadSvgManifest();
    const f = (face === 'back') ? 'back' : 'front';
    const src = m.base?.[f] || [];
    return src.map(e => ({
        file: e.file,
        slot: e.slot ?? null,
        side: e.side ?? null,
        which: e.which ?? null,
        offset: e.offset ?? { x: 0, y: 0 },
        scale: e.scale ?? { x: 1, y: 1 },
        product: e.product ?? "hoodie",
    }));
}

// –ü—Ä–µ–≤—å—é –±–∞–∑—ã: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–ª—é—á —Å –Ω–µ–π–º—Å–ø–µ–π—Å–æ–º, –∑–∞—Ç–µ–º ‚Äî –ø–æ —á–∏—Å—Ç–æ–º—É –∏–º–µ–Ω–∏
export async function getBasePreview(slot, face) {
    const m = await loadSvgManifest();
    const f = (face === 'back') ? 'back' : 'front';
    const nsKey = String(slot || "");
    const pure = nsKey.split(".").pop();
    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –¥–ª—è pants/‚Ä¶ –ù–ï –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –Ω–∞ "pure" (—á—Ç–æ–±—ã –Ω–µ —Ç—è–Ω—É—Ç—å hoodie-–ø—Ä–µ–≤—å—é)
    const product = nsKey.includes(".") ? nsKey.split(".")[0] : null;
    if (product && product !== "hoodie") {
        return m?.base?.previews?.[f]?.[nsKey] || null;
    }
    return m?.base?.previews?.[f]?.[nsKey] || m?.base?.previews?.[f]?.[pure] || null;
}

// –°–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ?
export async function hasSlotForFace(slot, face) {
    const m = await loadSvgManifest();
    const arr = (m?.base && m.base[face]) || [];
    const ns = String(slot || "");
    const pure = ns.split(".").pop();
    const product = ns.includes(".") ? ns.split(".")[0] : null;

    const hasBase = arr.some(x => x.slot === pure && (!product || x.product === product));
    const hasBackPreview = !!(m?.base?.previews?.[face]?.[ns] || m?.base?.previews?.[face]?.[pure]);
    const hasAnyVariantFiles =
        (m?.variants?.[pure] || []).some(v => {
            if (product && (v?.product || "hoodie") !== product) return false;
            const side = v?.files?.[face] || {};
            return !!(side.file || side.left || side.right || side.inner);
        });
    return hasBase || hasBackPreview || hasAnyVariantFiles;
}

// üîπ –ö–∞–∫–∏–µ —Å–ª–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ –º–µ–Ω—é –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ.
// –í–û–ó–í–†–ê–©–ê–ï–ú **–ù–ï–ô–ú–°–ü–ï–ô–°–ù–´–ï** –∫–ª—é—á–∏: "hoodie.cuff", "pants.cuff", ...
export async function getVisibleSlotsForFace(face) {
    const m = await loadSvgManifest();
    const f = face === 'back' ? 'back' : 'front';

    // –ë–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞
    const MIN_SECTIONS = {
        hoodie: ["body", "sleeve", "cuff", "belt", "hood", "pocket", "neck"],
        pants: ["leg", "belt", "cuff"]
    };

    const result = new Set();

    // 1) –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
    for (const [product, slots] of Object.entries(MIN_SECTIONS)) {
        for (const pure of slots) result.add(`${product}.${pure}`);
    }

    // 2) –ë–∞–∑–∞ (–µ—Å–ª–∏ –≤ manifest.base –∑–∞–¥–∞–Ω product/sl–æt)
    for (const e of (m?.base?.[f] || [])) {
        if (e?.slot) result.add(`${e.product || "hoodie"}.${e.slot}`);
    }

    // 3) –ü—Ä–µ–≤—å—é –±–∞–∑—ã (–∫–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å —Å/–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º)
    Object.keys(m?.base?.previews?.[f] || {}).forEach((k) => {
        const pure = String(k || "").split(".").pop();
        const product = k.includes(".") ? k.split(".")[0] : "hoodie";
        if (pure) result.add(`${product}.${pure}`);
    });

    // 4) –í–∞—Ä–∏–∞–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    for (const [slot, list] of Object.entries(m?.variants || {})) {
        for (const v of (list || [])) {
            const map = v?.files?.[f] || {};
            if (map.file || map.left || map.right || map.inner) {
                result.add(`${v?.product || "hoodie"}.${slot}`);
            }
        }
    }

    // 5) –§–æ—Ä—Å-—Å–ª–æ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ö—É–¥–∏ (hood/pocket –ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º)
    for (const s of FORCED_SLOTS[f]) result.add(`hoodie.${s}`);

    return Array.from(result);
}