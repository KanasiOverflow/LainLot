import { MANIFEST_URL } from "./svgPath";

// Runtime-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ manifest.json
let _manifestCache = null;

const FORCED_SLOTS = {
    front: new Set(["hood", "pocket"]),
    back: new Set(["hood"]),
};

// –∫–∞–∫–∏–µ —Å–ª–æ—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–µ–∂–¥—É –ø–µ—Ä–µ–¥–æ–º/—Å–ø–∏–Ω–∫–æ–π
const shouldSyncSlot = (slot) => slot && slot.toLowerCase() !== "pocket";

// –∞–ª–∏–∞—Å—ã –∏–º—ë–Ω —Å–ª–æ—Ç–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ)
const SLOT_ALIASES = {
    cuff: "cuff",
    sleeve: "sleeve",
    neck: "neck",
    belt: "belt",
    body: "body",
    hood: "hood",
    pocket: "pocket"
};

export function isForcedSlot(face, slot) {
    const f = face === "back" ? "back" : "front";
    return FORCED_SLOTS[f].has(slot);
}

export async function loadSvgManifest() {
    if (_manifestCache) return _manifestCache;
    const res = await fetch(MANIFEST_URL, { cache: "no-store" });
    if (!res.ok) throw new Error(`Manifest not found at ${MANIFEST_URL} (status ${res.status})`);
    const ct = (res.headers.get("content-type") || "").toLowerCase();
    if (!ct.includes("json")) {
        const head = await res.text();
        console.error("Manifest is not JSON. First bytes:", head.slice(0, 80));
        throw new Error("Manifest is not JSON");
    }
    _manifestCache = await res.json();
    return _manifestCache;
}

export async function baseHasSlot(face, slot) {
    const m = await loadSvgManifest();
    const list = m?.base?.[face] || [];
    return list.some(e => e?.slot === slot);
}

function resolveVariantList(manifest, slot) {
    const s = (slot || "").toLowerCase();
    const canon = SLOT_ALIASES[s] || s;
    const dict = manifest?.variants || {};
    // –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π
    return (
        dict[canon] ||
        dict[`${canon}s`] ||
        dict[s] ||
        []
    );
}

// –°–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è —Å–ª–æ—Ç–∞ (–±–∞–∑–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è)
export async function getVariantsForSlot(slot) {
    const m = await loadSvgManifest();
    const baseV = m.baseVariantBySlot?.[slot]
        ? [m.baseVariantBySlot[slot]]
        : [{ id: "base", name: "–ë–∞–∑–æ–≤–∞—è", preview: null, files: { front: {}, back: {} } }];
    let list = resolveVariantList(m, slot);

    // –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (front/back) ‚Äî –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã,
    // —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–æ—Ä–æ–Ω—ã.
    let face = null;
    try { face = (localStorage.getItem("ce.activeFace") || "").toLowerCase(); } catch { }
    if (face === "front" || face === "back") {
        list = list.filter(v => {
            if (!v || !v.files) return false;
            const map = v.files[face] || {};
            // –ï—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª (left/right/any)
            return Object.keys(map).length > 0;
        });
    }

    // —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏ –ø–æ id, –µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—à–ª–∏ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç
    const seen = new Set();
    const uniq = [];
    for (const v of list) {
        if (v && v.id && !seen.has(v.id)) {
            seen.add(v.id);
            uniq.push(v);
        }
    }
    return [...baseV, ...uniq];
}

// –ë–∞–∑–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ front/back, –±–µ–∑ –ø–æ–¥–ø–∞–ø–æ–∫)
export async function getBaseSources(face /* 'front'|'back' */) {
    const m = await loadSvgManifest();           // ‚Üê –±–µ—Ä—ë–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    const f = (face === 'back') ? 'back' : 'front';
    const src = m.base?.[f] || [];
    // –í–ê–ñ–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–õ–£–ë–û–ö–£–Æ –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–µ –º—É—Ç–∏—Ä–æ–≤–∞—Ç—å m.base[*]
    return src.map(e => ({
        file: e.file,
        slot: e.slot ?? null,
        side: e.side ?? null,
        which: e.which ?? null
    }));
}

// –í–µ—Ä–Ω—É—Ç—å –ø—É—Ç—å –ø—Ä–µ–≤—å—é –±–∞–∑–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
export async function getBasePreview(slot, face /* 'front' | 'back' */) {
    const m = await loadSvgManifest();
    const f = (face === 'back') ? 'back' : 'front';
    return m?.base?.previews?.[f]?.[slot] || null;
}

export async function hasSlotForFace(slot, face) {
    const m = await loadSvgManifest();
    const arr = (m?.base && m.base[face]) || [];
    const hasBase = arr.some(x => x.slot === slot);
    const hasBackPreview = !!m?.base?.previews?.[face]?.[slot];
    const hasAnyVariantFiles =
        (m?.variants?.[slot] || []).some(v => {
            const side = v?.files?.[face] || {};
            return !!(side.file || side.left || side.right || side.inner);
        });
    return hasBase || hasBackPreview || hasAnyVariantFiles;
}

// üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ: –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ —ç—Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (front/back)
export async function getVisibleSlotsForFace(face /* 'front' | 'back' */) {
    const m = await loadSvgManifest();
    const f = face === 'back' ? 'back' : 'front';
    const set = new Set();

    // –±–∞–∑–æ–≤—ã–µ SVG –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã
    for (const e of (m?.base?.[f] || [])) {
        if (e?.slot) set.add(e.slot);
    }
    // –±–∞–∑–æ–≤—ã–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Å—Ç–æ—Ä–æ–Ω—ã–∞
    Object.keys(m?.base?.previews?.[f] || {}).forEach(s => set.add(s));
    // –≤–∞—Ä–∏–∞–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ
    for (const [slot, list] of Object.entries(m?.variants || {})) {
        const ok = (list || []).some(v => {
            const map = v?.files?.[f] || {};
            return !!(map.file || map.left || map.right || map.inner);
        });
        if (ok) set.add(slot);
    }

    // –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä—Å-—Å–ª–æ—Ç—ã (–∫–∞–ø—é—à–æ–Ω –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∫–∞—Ä–º–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥)
    for (const s of FORCED_SLOTS[f])
        set.add(s);

    return Array.from(set);
}

export function reduceSetSlotVariant(
    prev,                                  // —Ç–µ–∫—É—â–µ–µ details {front:{}, back:{}}
    { face, slot, variantId, prevNeckByFace }
) {
    const other = face === "front" ? "back" : "front";
    const curFace = { ...(prev[face] || {}) };
    const curOther = { ...(prev[other] || {}) };
    const nextPrevNeck = { ...(prevNeckByFace || {}) };

    const hoodIsTurningOn = slot === "hood" && variantId && variantId !== "base";
    const hoodIsTurningOff = slot === "hood" && (variantId === "base" || variantId == null);
    const neckIsChanging = slot === "neck";

    // –ï—Å–ª–∏ –º–µ–Ω—è—é—Ç —à–µ—é, –∞ –∫–∞–ø—é—à–æ–Ω –≤–∫–ª—é—á—ë–Ω ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –∫–∞–ø—é—à–æ–Ω
    if (neckIsChanging) {
        const hoodActive = curFace.hood && curFace.hood !== "base";
        if (hoodActive) delete curFace.hood;
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ø—é—à–æ–Ω–∞: –∑–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —à–µ–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ —É–±–µ—Ä—ë–º –µ—ë
    if (hoodIsTurningOn) {
        nextPrevNeck[face] = curFace.neck ?? "base";
        delete curFace.neck;
    }

    // –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–ø—é—à–æ–Ω–∞: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —à–µ—é
    if (hoodIsTurningOff) {
        const prevNeck = nextPrevNeck[face];
        if (prevNeck) {
            if (prevNeck === "base") delete curFace.neck;
            else curFace.neck = prevNeck;
        }
        nextPrevNeck[face] = null;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
    if (variantId === "base" || variantId == null) {
        delete curFace[slot];
        if (shouldSyncSlot(slot)) delete curOther[slot];
    } else {
        curFace[slot] = variantId;
        if (shouldSyncSlot(slot)) curOther[slot] = variantId;
    }

    // –ï—Å–ª–∏ –º–µ–Ω—è–ª–∏ —à–µ—é ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º ¬´–ø–∞–º—è—Ç—å —à–µ–∏¬ª
    if (neckIsChanging) {
        nextPrevNeck[face] = curFace.neck ?? "base";
    }

    const nextDetails = { ...prev, [face]: curFace, [other]: curOther };
    return { nextDetails, nextPrevNeck };
}