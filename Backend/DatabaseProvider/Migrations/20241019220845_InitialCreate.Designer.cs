// <auto-generated />
using System;
using DatabaseProvider.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseProvider.Migrations
{
    [DbContext(typeof(LainLotContext))]
    [Migration("20241019220845_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseProvider.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("About_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("About", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("AccessLevels_pkey");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Cart_pkey");

                    b.HasIndex("FkProducts");

                    b.HasIndex("FkUsers");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Categories_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkCategories")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CategoryHierarchy_pkey");

                    b.HasIndex("FkCategories");

                    b.HasIndex("ParentId");

                    b.ToTable("CategoryHierarchy", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Colors_pkey");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Contacts_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizableProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomizationDetails")
                        .HasColumnType("text");

                    b.Property<int?>("FkColors")
                        .HasColumnType("integer");

                    b.Property<int?>("FkFabricTypes")
                        .HasColumnType("integer");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<string>("SizeOptions")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("CustomizableProducts_pkey");

                    b.HasIndex("FkColors");

                    b.HasIndex("FkFabricTypes");

                    b.HasIndex("FkProducts");

                    b.ToTable("CustomizableProducts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizationOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("text");

                    b.Property<int?>("FkColors")
                        .HasColumnType("integer");

                    b.Property<int?>("FkFabricTypes")
                        .HasColumnType("integer");

                    b.Property<int>("FkOrders")
                        .HasColumnType("integer");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id")
                        .HasName("CustomizationOrders_pkey");

                    b.HasIndex("FkColors");

                    b.HasIndex("FkFabricTypes");

                    b.HasIndex("FkOrders");

                    b.HasIndex("FkProducts");

                    b.ToTable("CustomizationOrders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.FabricType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("FabricTypes_pkey");

                    b.ToTable("FabricTypes");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("Languages_pkey");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkOrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShippingMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Orders_pkey");

                    b.HasIndex("FkOrderStatus");

                    b.HasIndex("FkUsers");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkOrders")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("OrderHistory_pkey");

                    b.HasIndex("FkOrders");

                    b.HasIndex("Status");

                    b.ToTable("OrderHistory", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("OrderStatuses_pkey");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("FkOrders")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Payments_pkey");

                    b.HasIndex("FkOrders");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCustomizable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Products_pkey");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id")
                        .HasName("ProductImages_pkey");

                    b.HasIndex("FkProducts");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("ProductTranslations_pkey");

                    b.HasIndex("FkLanguages");

                    b.HasIndex("FkProducts");

                    b.ToTable("ProductTranslations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Reviews_pkey");

                    b.HasIndex("FkProducts");

                    b.HasIndex("FkUsers");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfirmEmail")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("FkUserRoles")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex("FkUserRoles");

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "Users_Login_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ZipPostCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id")
                        .HasName("UserProfiles_pkey");

                    b.HasIndex("FkUsers");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkAccessLevels")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("UserRoles_pkey");

                    b.HasIndex("FkAccessLevels");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.About", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Abouts")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("About_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Cart", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Cart_FkProducts_fkey");

                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Cart_FkUsers_fkey");

                    b.Navigation("FkProductsNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Categories_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Category", "FkCategoriesNavigation")
                        .WithMany("CategoryHierarchies")
                        .HasForeignKey("FkCategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CategoryHierarchy_FkCategories_fkey");

                    b.HasOne("DatabaseProvider.Models.CategoryHierarchy", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CategoryHierarchy_ParentId_fkey");

                    b.Navigation("FkCategoriesNavigation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Contact", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Contacts")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Contacts_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizableProduct", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Color", "FkColorsNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkColors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CustomizableProducts_FkColors_fkey");

                    b.HasOne("DatabaseProvider.Models.FabricType", "FkFabricTypesNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkFabricTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CustomizableProducts_FkFabricTypes_fkey");

                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizableProducts_FkProducts_fkey");

                    b.Navigation("FkColorsNavigation");

                    b.Navigation("FkFabricTypesNavigation");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizationOrder", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Color", "FkColorsNavigation")
                        .WithMany("CustomizationOrders")
                        .HasForeignKey("FkColors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CustomizationOrders_FkColors_fkey");

                    b.HasOne("DatabaseProvider.Models.FabricType", "FkFabricTypesNavigation")
                        .WithMany("CustomizationOrders")
                        .HasForeignKey("FkFabricTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CustomizationOrders_FkFabricTypes_fkey");

                    b.HasOne("DatabaseProvider.Models.Order", "FkOrdersNavigation")
                        .WithMany("CustomizationOrders")
                        .HasForeignKey("FkOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizationOrders_FkOrders_fkey");

                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("CustomizationOrders")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizationOrders_FkProducts_fkey");

                    b.Navigation("FkColorsNavigation");

                    b.Navigation("FkFabricTypesNavigation");

                    b.Navigation("FkOrdersNavigation");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.HasOne("DatabaseProvider.Models.OrderStatus", "FkOrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkOrderStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkOrderStatus_fkey");

                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkUsers_fkey");

                    b.Navigation("FkOrderStatusNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderHistory", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Order", "FkOrdersNavigation")
                        .WithMany("OrderHistories")
                        .HasForeignKey("FkOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("OrderHistory_FkOrders_fkey");

                    b.HasOne("DatabaseProvider.Models.OrderStatus", "StatusNavigation")
                        .WithMany("OrderHistories")
                        .HasForeignKey("Status")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("OrderHistory_Status_fkey");

                    b.Navigation("FkOrdersNavigation");

                    b.Navigation("StatusNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Payment", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Order", "FkOrdersNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("FkOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payments_FkOrders_fkey");

                    b.Navigation("FkOrdersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductImage", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("ProductImages")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductImages_FkProducts_fkey");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductTranslation", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductTranslations_FkLanguages_fkey");

                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductTranslations_FkProducts_fkey");

                    b.Navigation("FkLanguagesNavigation");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Review", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reviews_FkProducts_fkey");

                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reviews_FkUsers_fkey");

                    b.Navigation("FkProductsNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.HasOne("DatabaseProvider.Models.UserRole", "FkUserRolesNavigation")
                        .WithMany("Users")
                        .HasForeignKey("FkUserRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Users_FkUserRoles_fkey");

                    b.Navigation("FkUserRolesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserProfile", b =>
                {
                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("UserProfiles")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserProfiles_FkUsers_fkey");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.HasOne("DatabaseProvider.Models.AccessLevel", "FkAccessLevelsNavigation")
                        .WithMany("UserRoles")
                        .HasForeignKey("FkAccessLevels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_FkAccessLevels_fkey");

                    b.Navigation("FkAccessLevelsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.AccessLevel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.Navigation("CategoryHierarchies");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Color", b =>
                {
                    b.Navigation("CustomizableProducts");

                    b.Navigation("CustomizationOrders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.FabricType", b =>
                {
                    b.Navigation("CustomizableProducts");

                    b.Navigation("CustomizationOrders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Language", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Categories");

                    b.Navigation("Contacts");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.Navigation("CustomizationOrders");

                    b.Navigation("OrderHistories");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CustomizableProducts");

                    b.Navigation("CustomizationOrders");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductTranslations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
