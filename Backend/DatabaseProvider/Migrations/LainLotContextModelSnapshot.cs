// <auto-generated />
using System;
using DatabaseProvider.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseProvider.Migrations
{
    [DbContext(typeof(LainLotContext))]
    partial class LainLotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseProvider.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("About_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("About", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.AccessLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("AccessLevels_pkey");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseBelt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BaseBelts_pkey");

                    b.ToTable("BaseBelts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseNeckline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BaseNecklines_pkey");

                    b.ToTable("BaseNecklines");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BasePant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BasePants_pkey");

                    b.ToTable("BasePants");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BasePantsCuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BasePantsCuffs_pkey");

                    b.ToTable("BasePantsCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BaseSleeves_pkey");

                    b.ToTable("BaseSleeves");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSleeveCuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BaseSleeveCuffs_pkey");

                    b.ToTable("BaseSleeveCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSportSuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkBaseBelts")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBaseNecklines")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBasePants")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBasePantsCuffsLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBasePantsCuffsRight")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBaseSleeveCuffsLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBaseSleeveCuffsRight")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBaseSleeves")
                        .HasColumnType("integer");

                    b.Property<int?>("FkBaseSweaters")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("BaseSportSuit_pkey");

                    b.HasIndex("FkBaseBelts");

                    b.HasIndex("FkBaseNecklines");

                    b.HasIndex("FkBasePants");

                    b.HasIndex("FkBasePantsCuffsLeft");

                    b.HasIndex("FkBasePantsCuffsRight");

                    b.HasIndex("FkBaseSleeveCuffsLeft");

                    b.HasIndex("FkBaseSleeveCuffsRight");

                    b.HasIndex("FkBaseSleeves");

                    b.HasIndex("FkBaseSweaters");

                    b.ToTable("BaseSportSuit", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSweater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id")
                        .HasName("BaseSweaters_pkey");

                    b.ToTable("BaseSweaters");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkCurrencies")
                        .HasColumnType("integer");

                    b.Property<int>("FkProductOrders")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("Cart_pkey");

                    b.HasIndex("FkCurrencies");

                    b.HasIndex("FkProductOrders");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("Categories_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkCategories")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CategoryHierarchy_pkey");

                    b.HasIndex("FkCategories");

                    b.HasIndex("ParentId");

                    b.ToTable("CategoryHierarchy", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Colors_pkey");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("Contacts_pkey");

                    b.HasIndex("FkLanguages");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Countries_pkey");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("Currencies_pkey");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomBelt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBaseBelts")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomBelts_pkey");

                    b.HasIndex("FkBaseBelts");

                    b.ToTable("CustomBelts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomNeckline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBaseNecklines")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomNecklines_pkey");

                    b.HasIndex("FkBaseNecklines");

                    b.ToTable("CustomNecklines");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBasePants")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomPants_pkey");

                    b.HasIndex("FkBasePants");

                    b.ToTable("CustomPants");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPantsCuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBasePantCuffs")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomPantsCuffs_pkey");

                    b.HasIndex("FkBasePantCuffs");

                    b.ToTable("CustomPantsCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBaseSleeves")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomSleeves_pkey");

                    b.HasIndex("FkBaseSleeves");

                    b.ToTable("CustomSleeves");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeveCuff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBaseSleeveCuffs")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomSleeveCuffs_pkey");

                    b.HasIndex("FkBaseSleeveCuffs");

                    b.ToTable("CustomSleeveCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSportSuit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkCustomBelts")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomNecklines")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomPants")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomPantsCuffsLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomPantsCuffsRight")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomSleeveCuffsLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomSleeveCuffsRight")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomSleeves")
                        .HasColumnType("integer");

                    b.Property<int?>("FkCustomSweaters")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomSportSuits_pkey");

                    b.HasIndex("FkCustomBelts");

                    b.HasIndex("FkCustomNecklines");

                    b.HasIndex("FkCustomPants");

                    b.HasIndex("FkCustomPantsCuffsLeft");

                    b.HasIndex("FkCustomPantsCuffsRight");

                    b.HasIndex("FkCustomSleeveCuffsLeft");

                    b.HasIndex("FkCustomSleeveCuffsRight");

                    b.HasIndex("FkCustomSleeves");

                    b.HasIndex("FkCustomSweaters");

                    b.ToTable("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSweater", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSettings")
                        .HasColumnType("jsonb");

                    b.Property<int>("FkBaseSweaters")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomSweaters_pkey");

                    b.HasIndex("FkBaseSweaters");

                    b.ToTable("CustomSweaters");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizableProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomizationDetails")
                        .HasColumnType("text");

                    b.Property<int>("FkCustomSportSuits")
                        .HasColumnType("integer");

                    b.Property<int>("FkFabricTypes")
                        .HasColumnType("integer");

                    b.Property<int>("FkSizeOptions")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("CustomizableProducts_pkey");

                    b.HasIndex("FkCustomSportSuits");

                    b.HasIndex("FkFabricTypes");

                    b.HasIndex("FkSizeOptions");

                    b.ToTable("CustomizableProducts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.FabricType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FkCurrencies")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("FabricTypes_pkey");

                    b.HasIndex("FkCurrencies");

                    b.ToTable("FabricTypes");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("Languages_pkey");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkOrderStatus")
                        .HasColumnType("integer");

                    b.Property<int>("FkPayments")
                        .HasColumnType("integer");

                    b.Property<int>("FkProductOrders")
                        .HasColumnType("integer");

                    b.Property<int>("FkShippingAddresses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Orders_pkey");

                    b.HasIndex("FkOrderStatus");

                    b.HasIndex("FkPayments");

                    b.HasIndex("FkProductOrders");

                    b.HasIndex("FkShippingAddresses");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ChangedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkOrderStatuses")
                        .HasColumnType("integer");

                    b.Property<int>("FkOrders")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("OrderHistory_pkey");

                    b.HasIndex("FkOrderStatuses");

                    b.HasIndex("FkOrders");

                    b.ToTable("OrderHistory", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("OrderStatuses_pkey");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkCurrencies")
                        .HasColumnType("integer");

                    b.Property<int>("FkPaymentMethods")
                        .HasColumnType("integer");

                    b.Property<int>("FkPaymentStatuses")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id")
                        .HasName("Payments_pkey");

                    b.HasIndex("FkCurrencies");

                    b.HasIndex("FkPaymentMethods");

                    b.HasIndex("FkPaymentStatuses");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DatabaseProvider.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Method")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id")
                        .HasName("PaymentMethods_pkey");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("DatabaseProvider.Models.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("PaymentStatuses_pkey");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkColors")
                        .HasColumnType("integer");

                    b.Property<int>("FkCurrencies")
                        .HasColumnType("integer");

                    b.Property<int>("FkFabricTypes")
                        .HasColumnType("integer");

                    b.Property<int>("FkSizeOptions")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCustomizable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Products_pkey");

                    b.HasIndex("FkColors");

                    b.HasIndex("FkCurrencies");

                    b.HasIndex("FkFabricTypes");

                    b.HasIndex("FkSizeOptions");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id")
                        .HasName("ProductImages_pkey");

                    b.HasIndex("FkProducts");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkCustomizableProducts")
                        .HasColumnType("integer");

                    b.Property<int?>("FkProducts")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("ProductOrders_pkey");

                    b.HasIndex("FkCustomizableProducts");

                    b.HasIndex("FkProducts");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FkCategories")
                        .HasColumnType("integer");

                    b.Property<int>("FkLanguages")
                        .HasColumnType("integer");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("ProductTranslations_pkey");

                    b.HasIndex("FkCategories");

                    b.HasIndex("FkLanguages");

                    b.HasIndex("FkProducts");

                    b.ToTable("ProductTranslations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FkProducts")
                        .HasColumnType("integer");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Reviews_pkey");

                    b.HasIndex("FkProducts");

                    b.HasIndex("FkUsers");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ShippingAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("FkCountries")
                        .HasColumnType("integer");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ZipPostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id")
                        .HasName("ShippingAddresses_pkey");

                    b.HasIndex("FkCountries");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("DatabaseProvider.Models.SizeOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("SizeOptions_pkey");

                    b.ToTable("SizeOptions");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConfirmEmail")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("FkUserRoles")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("Users_pkey");

                    b.HasIndex("FkUserRoles");

                    b.HasIndex(new[] { "Email" }, "Users_Email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Login" }, "Users_Login_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserOrderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkOrders")
                        .HasColumnType("integer");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("UserOrderHistory_pkey");

                    b.HasIndex("FkOrders");

                    b.HasIndex("FkUsers");

                    b.ToTable("UserOrderHistory", (string)null);
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("FkUsers")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ZipPostCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id")
                        .HasName("UserProfiles_pkey");

                    b.HasIndex("FkUsers");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FkAccessLevels")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id")
                        .HasName("UserRoles_pkey");

                    b.HasIndex("FkAccessLevels");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.About", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Abouts")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("About_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSportSuit", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseBelt", "FkBaseBeltsNavigation")
                        .WithMany("BaseSportSuits")
                        .HasForeignKey("FkBaseBelts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseBelts_fkey");

                    b.HasOne("DatabaseProvider.Models.BaseNeckline", "FkBaseNecklinesNavigation")
                        .WithMany("BaseSportSuits")
                        .HasForeignKey("FkBaseNecklines")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseNecklines_fkey");

                    b.HasOne("DatabaseProvider.Models.BasePant", "FkBasePantsNavigation")
                        .WithMany("BaseSportSuits")
                        .HasForeignKey("FkBasePants")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBasePants_fkey");

                    b.HasOne("DatabaseProvider.Models.BasePantsCuff", "FkBasePantsCuffsLeftNavigation")
                        .WithMany("BaseSportSuitFkBasePantsCuffsLeftNavigations")
                        .HasForeignKey("FkBasePantsCuffsLeft")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBasePantsCuffsLeft_fkey");

                    b.HasOne("DatabaseProvider.Models.BasePantsCuff", "FkBasePantsCuffsRightNavigation")
                        .WithMany("BaseSportSuitFkBasePantsCuffsRightNavigations")
                        .HasForeignKey("FkBasePantsCuffsRight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBasePantsCuffsRight_fkey");

                    b.HasOne("DatabaseProvider.Models.BaseSleeveCuff", "FkBaseSleeveCuffsLeftNavigation")
                        .WithMany("BaseSportSuitFkBaseSleeveCuffsLeftNavigations")
                        .HasForeignKey("FkBaseSleeveCuffsLeft")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseSleeveCuffsLeft_fkey");

                    b.HasOne("DatabaseProvider.Models.BaseSleeveCuff", "FkBaseSleeveCuffsRightNavigation")
                        .WithMany("BaseSportSuitFkBaseSleeveCuffsRightNavigations")
                        .HasForeignKey("FkBaseSleeveCuffsRight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseSleeveCuffsRight_fkey");

                    b.HasOne("DatabaseProvider.Models.BaseSleeve", "FkBaseSleevesNavigation")
                        .WithMany("BaseSportSuits")
                        .HasForeignKey("FkBaseSleeves")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseSleeves_fkey");

                    b.HasOne("DatabaseProvider.Models.BaseSweater", "FkBaseSweatersNavigation")
                        .WithMany("BaseSportSuits")
                        .HasForeignKey("FkBaseSweaters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("BaseSportSuit_FkBaseSweaters_fkey");

                    b.Navigation("FkBaseBeltsNavigation");

                    b.Navigation("FkBaseNecklinesNavigation");

                    b.Navigation("FkBasePantsCuffsLeftNavigation");

                    b.Navigation("FkBasePantsCuffsRightNavigation");

                    b.Navigation("FkBasePantsNavigation");

                    b.Navigation("FkBaseSleeveCuffsLeftNavigation");

                    b.Navigation("FkBaseSleeveCuffsRightNavigation");

                    b.Navigation("FkBaseSleevesNavigation");

                    b.Navigation("FkBaseSweatersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Cart", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Currency", "FkCurrenciesNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("FkCurrencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Cart_FkCurrencies_fkey");

                    b.HasOne("DatabaseProvider.Models.ProductOrder", "FkProductOrdersNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("FkProductOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Cart_FkProductOrders_fkey");

                    b.Navigation("FkCurrenciesNavigation");

                    b.Navigation("FkProductOrdersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Categories")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Categories_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Category", "FkCategoriesNavigation")
                        .WithMany("CategoryHierarchies")
                        .HasForeignKey("FkCategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CategoryHierarchy_FkCategories_fkey");

                    b.HasOne("DatabaseProvider.Models.CategoryHierarchy", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("CategoryHierarchy_ParentId_fkey");

                    b.Navigation("FkCategoriesNavigation");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Contact", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("Contacts")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Contacts_FkLanguages_fkey");

                    b.Navigation("FkLanguagesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomBelt", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseBelt", "FkBaseBeltsNavigation")
                        .WithMany("CustomBelts")
                        .HasForeignKey("FkBaseBelts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomBelts_FkBaseBelts_fkey");

                    b.Navigation("FkBaseBeltsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomNeckline", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseNeckline", "FkBaseNecklinesNavigation")
                        .WithMany("CustomNecklines")
                        .HasForeignKey("FkBaseNecklines")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomNecklines_FkBaseNecklines_fkey");

                    b.Navigation("FkBaseNecklinesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPant", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BasePant", "FkBasePantsNavigation")
                        .WithMany("CustomPants")
                        .HasForeignKey("FkBasePants")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomPants_FkBasePants_fkey");

                    b.Navigation("FkBasePantsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPantsCuff", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BasePantsCuff", "FkBasePantCuffsNavigation")
                        .WithMany("CustomPantsCuffs")
                        .HasForeignKey("FkBasePantCuffs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomPantsCuffs_FkBasePantCuffs_fkey");

                    b.Navigation("FkBasePantCuffsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeve", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseSleeve", "FkBaseSleevesNavigation")
                        .WithMany("CustomSleeves")
                        .HasForeignKey("FkBaseSleeves")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomSleeves_FkBaseSleeves_fkey");

                    b.Navigation("FkBaseSleevesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeveCuff", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseSleeveCuff", "FkBaseSleeveCuffsNavigation")
                        .WithMany("CustomSleeveCuffs")
                        .HasForeignKey("FkBaseSleeveCuffs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomSleeveCuffs_FkBaseSleeveCuffs_fkey");

                    b.Navigation("FkBaseSleeveCuffsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSportSuit", b =>
                {
                    b.HasOne("DatabaseProvider.Models.CustomBelt", "FkCustomBeltsNavigation")
                        .WithMany("CustomSportSuits")
                        .HasForeignKey("FkCustomBelts")
                        .HasConstraintName("CustomSportSuits_FkCustomBelts_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomNeckline", "FkCustomNecklinesNavigation")
                        .WithMany("CustomSportSuits")
                        .HasForeignKey("FkCustomNecklines")
                        .HasConstraintName("CustomSportSuits_FkCustomNecklines_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomPant", "FkCustomPantsNavigation")
                        .WithMany("CustomSportSuits")
                        .HasForeignKey("FkCustomPants")
                        .HasConstraintName("CustomSportSuits_FkCustomPants_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomPantsCuff", "FkCustomPantsCuffsLeftNavigation")
                        .WithMany("CustomSportSuitFkCustomPantsCuffsLeftNavigations")
                        .HasForeignKey("FkCustomPantsCuffsLeft")
                        .HasConstraintName("CustomSportSuits_FkCustomPantsCuffsLeft_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomPantsCuff", "FkCustomPantsCuffsRightNavigation")
                        .WithMany("CustomSportSuitFkCustomPantsCuffsRightNavigations")
                        .HasForeignKey("FkCustomPantsCuffsRight")
                        .HasConstraintName("CustomSportSuits_FkCustomPantsCuffsRight_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomSleeveCuff", "FkCustomSleeveCuffsLeftNavigation")
                        .WithMany("CustomSportSuitFkCustomSleeveCuffsLeftNavigations")
                        .HasForeignKey("FkCustomSleeveCuffsLeft")
                        .HasConstraintName("CustomSportSuits_FkCustomSleeveCuffsLeft_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomSleeveCuff", "FkCustomSleeveCuffsRightNavigation")
                        .WithMany("CustomSportSuitFkCustomSleeveCuffsRightNavigations")
                        .HasForeignKey("FkCustomSleeveCuffsRight")
                        .HasConstraintName("CustomSportSuits_FkCustomSleeveCuffsRight_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomSleeve", "FkCustomSleevesNavigation")
                        .WithMany("CustomSportSuits")
                        .HasForeignKey("FkCustomSleeves")
                        .HasConstraintName("CustomSportSuits_FkCustomSleeves_fkey");

                    b.HasOne("DatabaseProvider.Models.CustomSweater", "FkCustomSweatersNavigation")
                        .WithMany("CustomSportSuits")
                        .HasForeignKey("FkCustomSweaters")
                        .HasConstraintName("CustomSportSuits_FkCustomSweaters_fkey");

                    b.Navigation("FkCustomBeltsNavigation");

                    b.Navigation("FkCustomNecklinesNavigation");

                    b.Navigation("FkCustomPantsCuffsLeftNavigation");

                    b.Navigation("FkCustomPantsCuffsRightNavigation");

                    b.Navigation("FkCustomPantsNavigation");

                    b.Navigation("FkCustomSleeveCuffsLeftNavigation");

                    b.Navigation("FkCustomSleeveCuffsRightNavigation");

                    b.Navigation("FkCustomSleevesNavigation");

                    b.Navigation("FkCustomSweatersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSweater", b =>
                {
                    b.HasOne("DatabaseProvider.Models.BaseSweater", "FkBaseSweatersNavigation")
                        .WithMany("CustomSweaters")
                        .HasForeignKey("FkBaseSweaters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomSweaters_FkBaseSweaters_fkey");

                    b.Navigation("FkBaseSweatersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizableProduct", b =>
                {
                    b.HasOne("DatabaseProvider.Models.CustomSportSuit", "FkCustomSportSuitsNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkCustomSportSuits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizableProducts_FkCustomSportSuits_fkey");

                    b.HasOne("DatabaseProvider.Models.FabricType", "FkFabricTypesNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkFabricTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizableProducts_FkFabricTypes_fkey");

                    b.HasOne("DatabaseProvider.Models.SizeOption", "FkSizeOptionsNavigation")
                        .WithMany("CustomizableProducts")
                        .HasForeignKey("FkSizeOptions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CustomizableProducts_FkSizeOptions_fkey");

                    b.Navigation("FkCustomSportSuitsNavigation");

                    b.Navigation("FkFabricTypesNavigation");

                    b.Navigation("FkSizeOptionsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.FabricType", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Currency", "FkCurrenciesNavigation")
                        .WithMany("FabricTypes")
                        .HasForeignKey("FkCurrencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FabricTypes_FkCurrencies_fkey");

                    b.Navigation("FkCurrenciesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.HasOne("DatabaseProvider.Models.OrderStatus", "FkOrderStatusNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkOrderStatus")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkOrderStatus_fkey");

                    b.HasOne("DatabaseProvider.Models.Payment", "FkPaymentsNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkPayments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkPayments_fkey");

                    b.HasOne("DatabaseProvider.Models.ProductOrder", "FkProductOrdersNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkProductOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkProductOrders_fkey");

                    b.HasOne("DatabaseProvider.Models.ShippingAddress", "FkShippingAddressesNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("FkShippingAddresses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Orders_FkShippingAddresses_fkey");

                    b.Navigation("FkOrderStatusNavigation");

                    b.Navigation("FkPaymentsNavigation");

                    b.Navigation("FkProductOrdersNavigation");

                    b.Navigation("FkShippingAddressesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderHistory", b =>
                {
                    b.HasOne("DatabaseProvider.Models.OrderStatus", "FkOrderStatusesNavigation")
                        .WithMany("OrderHistories")
                        .HasForeignKey("FkOrderStatuses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("OrderHistory_FkOrderStatuses_fkey");

                    b.HasOne("DatabaseProvider.Models.Order", "FkOrdersNavigation")
                        .WithMany("OrderHistories")
                        .HasForeignKey("FkOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("OrderHistory_FkOrders_fkey");

                    b.Navigation("FkOrderStatusesNavigation");

                    b.Navigation("FkOrdersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Payment", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Currency", "FkCurrenciesNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("FkCurrencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payments_FkCurrencies_fkey");

                    b.HasOne("DatabaseProvider.Models.PaymentMethod", "FkPaymentMethodsNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("FkPaymentMethods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payments_FkPaymentMethods_fkey");

                    b.HasOne("DatabaseProvider.Models.PaymentStatus", "FkPaymentStatusesNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("FkPaymentStatuses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Payments_FkPaymentStatuses_fkey");

                    b.Navigation("FkCurrenciesNavigation");

                    b.Navigation("FkPaymentMethodsNavigation");

                    b.Navigation("FkPaymentStatusesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Product", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Color", "FkColorsNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkColors")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Products_FkColors_fkey");

                    b.HasOne("DatabaseProvider.Models.Currency", "FkCurrenciesNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkCurrencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Products_FkCurrencies_fkey");

                    b.HasOne("DatabaseProvider.Models.FabricType", "FkFabricTypesNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkFabricTypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Products_FkFabricTypes_fkey");

                    b.HasOne("DatabaseProvider.Models.SizeOption", "FkSizeOptionsNavigation")
                        .WithMany("Products")
                        .HasForeignKey("FkSizeOptions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Products_FkSizeOptions_fkey");

                    b.Navigation("FkColorsNavigation");

                    b.Navigation("FkCurrenciesNavigation");

                    b.Navigation("FkFabricTypesNavigation");

                    b.Navigation("FkSizeOptionsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductImage", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("ProductImages")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductImages_FkProducts_fkey");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductOrder", b =>
                {
                    b.HasOne("DatabaseProvider.Models.CustomizableProduct", "FkCustomizableProductsNavigation")
                        .WithMany("ProductOrders")
                        .HasForeignKey("FkCustomizableProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ProductOrders_FkCustomizableProducts_fkey");

                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("ProductOrders")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("ProductOrders_FkProducts_fkey");

                    b.Navigation("FkCustomizableProductsNavigation");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductTranslation", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Category", "FkCategoriesNavigation")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("FkCategories")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductTranslations_FkCategories_fkey");

                    b.HasOne("DatabaseProvider.Models.Language", "FkLanguagesNavigation")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("FkLanguages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductTranslations_FkLanguages_fkey");

                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("ProductTranslations")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ProductTranslations_FkProducts_fkey");

                    b.Navigation("FkCategoriesNavigation");

                    b.Navigation("FkLanguagesNavigation");

                    b.Navigation("FkProductsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Review", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Product", "FkProductsNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("FkProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reviews_FkProducts_fkey");

                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reviews_FkUsers_fkey");

                    b.Navigation("FkProductsNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ShippingAddress", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Country", "FkCountriesNavigation")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("FkCountries")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ShippingAddresses_FkCountries_fkey");

                    b.Navigation("FkCountriesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.HasOne("DatabaseProvider.Models.UserRole", "FkUserRolesNavigation")
                        .WithMany("Users")
                        .HasForeignKey("FkUserRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Users_FkUserRoles_fkey");

                    b.Navigation("FkUserRolesNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserOrderHistory", b =>
                {
                    b.HasOne("DatabaseProvider.Models.Order", "FkOrdersNavigation")
                        .WithMany("UserOrderHistories")
                        .HasForeignKey("FkOrders")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserOrderHistory_FkOrders_fkey");

                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("UserOrderHistories")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserOrderHistory_FkUsers_fkey");

                    b.Navigation("FkOrdersNavigation");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserProfile", b =>
                {
                    b.HasOne("DatabaseProvider.Models.User", "FkUsersNavigation")
                        .WithMany("UserProfiles")
                        .HasForeignKey("FkUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserProfiles_FkUsers_fkey");

                    b.Navigation("FkUsersNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.HasOne("DatabaseProvider.Models.AccessLevel", "FkAccessLevelsNavigation")
                        .WithMany("UserRoles")
                        .HasForeignKey("FkAccessLevels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UserRoles_FkAccessLevels_fkey");

                    b.Navigation("FkAccessLevelsNavigation");
                });

            modelBuilder.Entity("DatabaseProvider.Models.AccessLevel", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseBelt", b =>
                {
                    b.Navigation("BaseSportSuits");

                    b.Navigation("CustomBelts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseNeckline", b =>
                {
                    b.Navigation("BaseSportSuits");

                    b.Navigation("CustomNecklines");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BasePant", b =>
                {
                    b.Navigation("BaseSportSuits");

                    b.Navigation("CustomPants");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BasePantsCuff", b =>
                {
                    b.Navigation("BaseSportSuitFkBasePantsCuffsLeftNavigations");

                    b.Navigation("BaseSportSuitFkBasePantsCuffsRightNavigations");

                    b.Navigation("CustomPantsCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSleeve", b =>
                {
                    b.Navigation("BaseSportSuits");

                    b.Navigation("CustomSleeves");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSleeveCuff", b =>
                {
                    b.Navigation("BaseSportSuitFkBaseSleeveCuffsLeftNavigations");

                    b.Navigation("BaseSportSuitFkBaseSleeveCuffsRightNavigations");

                    b.Navigation("CustomSleeveCuffs");
                });

            modelBuilder.Entity("DatabaseProvider.Models.BaseSweater", b =>
                {
                    b.Navigation("BaseSportSuits");

                    b.Navigation("CustomSweaters");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Category", b =>
                {
                    b.Navigation("CategoryHierarchies");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CategoryHierarchy", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Country", b =>
                {
                    b.Navigation("ShippingAddresses");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Currency", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FabricTypes");

                    b.Navigation("Payments");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomBelt", b =>
                {
                    b.Navigation("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomNeckline", b =>
                {
                    b.Navigation("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPant", b =>
                {
                    b.Navigation("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomPantsCuff", b =>
                {
                    b.Navigation("CustomSportSuitFkCustomPantsCuffsLeftNavigations");

                    b.Navigation("CustomSportSuitFkCustomPantsCuffsRightNavigations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeve", b =>
                {
                    b.Navigation("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSleeveCuff", b =>
                {
                    b.Navigation("CustomSportSuitFkCustomSleeveCuffsLeftNavigations");

                    b.Navigation("CustomSportSuitFkCustomSleeveCuffsRightNavigations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSportSuit", b =>
                {
                    b.Navigation("CustomizableProducts");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomSweater", b =>
                {
                    b.Navigation("CustomSportSuits");
                });

            modelBuilder.Entity("DatabaseProvider.Models.CustomizableProduct", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.FabricType", b =>
                {
                    b.Navigation("CustomizableProducts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Language", b =>
                {
                    b.Navigation("Abouts");

                    b.Navigation("Categories");

                    b.Navigation("Contacts");

                    b.Navigation("ProductTranslations");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Order", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("UserOrderHistories");
                });

            modelBuilder.Entity("DatabaseProvider.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderHistories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.PaymentMethod", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DatabaseProvider.Models.PaymentStatus", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DatabaseProvider.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductOrders");

                    b.Navigation("ProductTranslations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ProductOrder", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.ShippingAddress", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DatabaseProvider.Models.SizeOption", b =>
                {
                    b.Navigation("CustomizableProducts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("DatabaseProvider.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("UserOrderHistories");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("DatabaseProvider.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
